diff --git a/.gitignore b/.gitignore
index e3724a9f..ff2dc9c2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,6 +5,7 @@ packer_cache/*
 key/*
 packages/*
 !packages/*/
+ti-bdebstrap/
 data/live-build-config/includes.chroot/var/lib/shim-signed/mok/*
 /testinstall*.img
 /testinstall*.efivars
diff --git a/build-am64x-boot.sh b/build-am64x-boot.sh
new file mode 100755
index 00000000..20e1c3bb
--- /dev/null
+++ b/build-am64x-boot.sh
@@ -0,0 +1,51 @@
+#!/bin/bash
+CWD=$(pwd)
+
+TARGET_NAME=bookworm-am64xx-evm
+
+set -e
+
+# argument1 => patches folder
+if [[ -z $1 ]]; then
+    echo "E: Missing 1st arguments. ex> $0 <patch dir> <sudo password>"
+    exit -1
+else
+    PATCH_DIR="$1"
+fi
+
+if [[ -z $2 ]]; then
+    echo "W: Missing 2nd arguments. ex> $0 <patch dir> <sudo password>"
+else
+    SUDO_PIN="$2"
+fi
+
+TI_BDEB_PATCH=${PATCH_DIR}/ti_bdebstrap
+if [ ! -d ${TI_BDEB_PATCH} ]; then
+    echo "Patch directory ($TI_BDEB_PATCH) does not exists"
+    exit -1
+fi
+
+SRC=ti-bdebstrap
+if [ ! -d $SRC ]; then
+    echo "I: Clone TI packages"
+    git clone https://github.com/TexasInstruments/ti-bdebstrap.git $SRC
+#    echo "I: switch to branch XXX"
+#    git checkout XXX
+    cd $SRC
+
+    for patch in $(ls ${TI_BDEB_PATCH})
+    do
+        echo "I: Apply patch: ${TI_BDEB_PATCH}/${patch}"
+        patch -p1 < ${TI_BDEB_PATCH}/${patch}
+    done
+else
+    cd $SRC
+fi
+
+echo "I: Building BSP image for \"${TARGET_NAME}\" and creating Package"
+if [ -z $SUDO_PIN ]; then
+    sudo ./build.sh ${TARGET_NAME}
+else
+    # echo "I: Sudo PIN: $SUDO_PIN"
+    sudo -S <<< $SUDO_PIN ./build.sh ${TARGET_NAME}
+fi
diff --git a/build-image.sh b/build-image.sh
new file mode 100755
index 00000000..c16dfc0c
--- /dev/null
+++ b/build-image.sh
@@ -0,0 +1,71 @@
+#!/bin/bash
+
+set -e
+ROOTDIR=$(pwd)
+
+function recursive_copy_file_folder() {
+    local SRC=$1
+    local DST=$2
+    for FILE in `ls $SRC`
+    do
+        if [ -d $SRC/$FILE ]; then
+            # echo "$FILE is a directory. Making $DST/$FILE"
+            mkdir -p $DST/$FILE
+            copy_parsing $SRC/$FILE $DST/$FILE
+        else
+            # echo "$FILE is not a directory(file?). Copying to $DST/$FILE"
+            # echo "  Copying $SRC/$FILE to $DST/$FILE"
+            cp -av $SRC/$FILE $DST/$FILE
+        fi
+    done
+}
+
+# argument1 => Build-by
+if [[ -z $1 ]]; then
+    echo "Missing 1st arguments. ex> $0 <build-by> <patch dir>"
+    exit -1
+else
+    BUILD_BY="$1"
+fi
+# argument2 => patches folder
+if [[ -z $2 ]]; then
+    echo "Missing 2nd arguments. ex> $0 <build-by> <patch dir>"
+    exit -1
+else
+    PATCH_DIR="$2"
+fi
+
+./build-vyos-image generic --debug --architecture arm64 --build-by $BUILD_BY --build-type development
+cd $ROOTDIR
+
+# Check ISO file
+LIVE_IMAGE_ISO=build/live-image-arm64.hybrid.iso
+
+if [ ! -e ${LIVE_IMAGE_ISO} ]; then
+  echo "File ${LIVE_IMAGE_ISO} not exists."
+  exit -1
+fi
+
+ISOLOOP=$(losetup --show -f ${LIVE_IMAGE_ISO})
+echo "Mounting iso on loopback: ${ISOLOOP}"
+
+rm -rf build/tmp/
+mkdir build/tmp/
+mount -o ro ${ISOLOOP} build/tmp/
+
+rm -rf build/fs
+unsquashfs -d build/fs build/tmp/live/filesystem.squashfs
+
+mkdir build/fs/boot/dtb
+cp -R build/fs/usr/lib/linux-image*/ti build/fs/boot/dtb
+
+cat build/fs/boot/vmlinuz* | sh -c 'gunzip -d > build/fs/boot/Image'
+
+echo "Copy new default configuration to the vyos image"
+recursive_copy_file_folder ${PATCH_DIR}/fs ${ROOTDIR}/build/fs
+#cp -Rf ${PATCH_DIR}/fs/* ${ROOTDIR}/build/fs/
+#cp -rf ${PATCH_DIR}/fs/usr/share/vyos/config.boot.default ${ROOTDIR}/build/fs/usr/share/vyos/config.boot.default
+#cp -rf ${PATCH_DIR}/fs/usr/libexec/vyos/conf_mode/system_console.py ${ROOTDIR}/build/fs/usr/libexec/vyos/conf_mode
+
+umount -d build/tmp/
+#losetup -d ${ISOLOOP}
diff --git a/build-packages.sh b/build-packages.sh
new file mode 100755
index 00000000..00efa83f
--- /dev/null
+++ b/build-packages.sh
@@ -0,0 +1,85 @@
+#!/usr/bin/bash
+
+base_dir=$(pwd)
+pkgs_dir=packages
+output_dir=
+
+#echo "Base directory: $base_dir"
+
+if [[ $1 == "all" ]]; then
+    patt=$pkgs_dir/*/
+else
+    patt=$1
+fi
+
+for dir_name in  $(ls -d $patt); do
+    pkg_name_def=""
+    pkg_name=""
+    scm_commit=""
+    scm_url=""
+    build_cmd=""
+
+    # remove all deb files in the directory before compiling deb files
+#    find $base_dir/$dir_name -name *.deb | xargs rm
+    echo "Dir name: $dir_name"
+
+    cd $base_dir/$dir_name
+    if [[ $dir_name =~ "linux-kernel" ]]; then
+        file_name=$base_dir/$dir_name/perle-Jenkinsfile
+    else
+        file_name=$base_dir/$dir_name/Jenkinsfile
+    fi
+
+    echo "File name: $file_name"
+    while read -r line; do
+        if [[ $line =~ "def package_name" ]]; then
+            pkg_name_def="$(echo $line | awk -F"= " '{print $2}' | tr -d "'" | tr -d "," | tr -d "[" | tr -d "]" )"
+            echo "Defined package name: $pkg_name_def"
+        elif [[ $line =~ "'name'" ]]; then
+            pkg_name="$(echo $line | awk -F": " '{print $2}' | tr -d "'" | tr -d "," | tr -d "[" | tr -d "]" )"
+            if [[ $pkg_name_def != "" ]]; then
+                pkg_name=$pkg_name_def
+            fi
+            echo "Package name: $pkg_name"
+        elif [[ $line =~ "'scmCommit'" ]]; then
+            scm_commit="$(echo $line | awk -F": " '{print $2}' | tr -d "'" | tr -d "," | tr -d "[" | tr -d "]" )"
+            echo "scmCommit: $scm_commit"
+        elif [[ $line =~ "'scmUrl'" ]]; then
+            scm_url="$(echo $line | awk -F": " '{print $2}' | tr -d "'" | tr -d "," | tr -d "[" | tr -d "]" )"
+            echo "scmUrl: $scm_url"
+        elif [[ $line =~ "'buildCmd'" ]]; then
+            build_cmd="$(echo $line | awk -F": " '{print $2}' | tr -d "'" | tr -d "," | tr -d "[" | tr -d "]" )"
+            echo "Buildcmd: $build_cmd"
+            if [[ -n $scm_url ]]; then
+                if [[ -d $pkg_name ]]; then
+                    echo "pkg_name: $pkg_name"
+                    cd $pkg_name
+                else
+                    echo "clone pkg_name: $pkg_name"
+                    git clone $scm_url $pkg_name
+                    cd $pkg_name
+                    git checkout $scm_commit
+                fi
+            fi
+            eval "$build_cmd"
+            cd $base_dir/$dir_name
+            pkg_name_def=""
+            pkg_name=""
+            scm_commit=""
+            scm_url=""
+            build_cmd=""
+#        else
+#            echo "Undefined line: $line"
+        fi
+    done < "$file_name"
+    cd $base_dir
+
+    # copy all deb files to the base directory
+    if [[ ! -d $pkgs_dir/$output_dir ]]; then
+        echo "Making Directory: $pkgs_dir/$output_dir"
+        mkdir -p $pkgs_dir/$output_dir
+    fi
+    echo "Copy all deb files from $base_dir/$dir_name to $pkgs_dir/$output_dir ..."
+    cp -rf $base_dir/$dir_name/*.deb $pkgs_dir/$output_dir | true
+done
+
diff --git a/packages/aws-gateway-load-balancer-tunnel-handler/.gitignore b/packages/aws-gateway-load-balancer-tunnel-handler/.gitignore
index a3e428dc..7cec2d30 100644
--- a/packages/aws-gateway-load-balancer-tunnel-handler/.gitignore
+++ b/packages/aws-gateway-load-balancer-tunnel-handler/.gitignore
@@ -1 +1 @@
-aws-gwlbtun/
+aws-gwlbtun*
diff --git a/packages/aws-gateway-load-balancer-tunnel-handler/Jenkinsfile b/packages/aws-gateway-load-balancer-tunnel-handler/Jenkinsfile
index cbf5a407..7bdb643e 100644
--- a/packages/aws-gateway-load-balancer-tunnel-handler/Jenkinsfile
+++ b/packages/aws-gateway-load-balancer-tunnel-handler/Jenkinsfile
@@ -23,10 +23,10 @@ def timestamp = new Date().format('yyyyMMddhhmmss')
 def commit_id = 'f78058a'
 
 def pkgList = [
-    ['name': "aws-gwlbtun-${timestamp}-${commit_id}",
-     'scmCommit': commit_id,
+    ['name': 'aws-gwlbtun-2024-f78058a',
+     'scmCommit': 'f78058a',
      'scmUrl': 'https://github.com/aws-samples/aws-gateway-load-balancer-tunnel-handler',
-     'buildCmd': "../build.py --package aws-gwlbtun --version ${timestamp}-${commit_id}"],
+     'buildCmd': '../build.py --package aws-gwlbtun --version 2024-f78058a'],
 ]
 
 // Start package build using library function from https://github.com/vyos/vyos-build
diff --git a/packages/frr/Jenkinsfile b/packages/frr/Jenkinsfile
index 441b1681..b7c37267 100644
--- a/packages/frr/Jenkinsfile
+++ b/packages/frr/Jenkinsfile
@@ -30,7 +30,7 @@ def pkgList = [
      'scmUrl': 'https://github.com/rtrlib/rtrlib.git',
      'buildCmd': 'sudo mk-build-deps --install --tool "apt-get --yes --no-install-recommends"; dpkg-buildpackage -uc -us -tc -b'],
     ['name': 'frr',
-     'scmCommit': 'stable/9.1',
+     'scmCommit': 'frr-10.1',
      'scmUrl': 'https://github.com/FRRouting/frr.git',
      'buildCmd': 'sudo dpkg -i ../*.deb; sudo mk-build-deps --install --tool "apt-get --yes --no-install-recommends"; cd ..; ./build-frr.sh'],
 ]
diff --git a/packages/hsflowd/build.sh b/packages/hsflowd/build.sh
index 0b00c998..eb845ac0 100755
--- a/packages/hsflowd/build.sh
+++ b/packages/hsflowd/build.sh
@@ -20,7 +20,8 @@ echo "I: Build VyOS hsflowd Package"
 make deb FEATURES="PCAP DROPMON DBUS"
 
 # hsflowd builds ARM package as aarch64 extension, rename to arm64
-for file in *.deb ; do mv $file ${file//aarch64/arm64} || true ; done
+# for file in *.deb ; do mv $file ${file//aarch64/arm64} || true ; done
+for file in *.deb ; do mv $file .. || true ; done
 
 # Do not confuse *.deb upload logic by removing build in debian packages ...
 # ugly but works
diff --git a/packages/isc-dhcp/.gitignore b/packages/isc-dhcp/.gitignore
index d2c5a2db..eef7b55a 100644
--- a/packages/isc-dhcp/.gitignore
+++ b/packages/isc-dhcp/.gitignore
@@ -1 +1 @@
-isc-dhcp/
+isc-dhcp*
diff --git a/packages/keepalived/Jenkinsfile b/packages/keepalived/Jenkinsfile
index 0d886751..02e95b49 100644
--- a/packages/keepalived/Jenkinsfile
+++ b/packages/keepalived/Jenkinsfile
@@ -23,7 +23,7 @@
 def package_name = 'keepalived'
 
 def pkgList = [
-    ['name': "${package_name}",
+    ['name': 'keepalived',
      'scmCommit': 'debian/1%2.2.8-1',
      'scmUrl': 'https://salsa.debian.org/debian/pkg-keepalived.git',
      'buildCmd': 'sudo mk-build-deps --install --tool "apt-get --yes --no-install-recommends"; ../build.py'],
diff --git a/packages/linux-kernel/.gitignore b/packages/linux-kernel/.gitignore
index a3e9257c..481da8d1 100644
--- a/packages/linux-kernel/.gitignore
+++ b/packages/linux-kernel/.gitignore
@@ -1,4 +1,4 @@
-/linux
+/linux*
 /wireguard
 /wireguard-linux-compat
 /accel-ppp
@@ -11,6 +11,8 @@
 /jool*
 /qat*
 /QAT*
+/debian-repos
+/mwifiex
 *.tar.xz
 /*.postinst
 
diff --git a/packages/linux-kernel/build-kernel.sh b/packages/linux-kernel/build-kernel.sh
index f7b0c597..e85e9e03 100755
--- a/packages/linux-kernel/build-kernel.sh
+++ b/packages/linux-kernel/build-kernel.sh
@@ -2,6 +2,7 @@
 CWD=$(pwd)
 KERNEL_SRC=linux
 
+FRESH_BUILD=true
 set -e
 
 if [ ! -d ${KERNEL_SRC} ]; then
@@ -9,62 +10,68 @@ if [ ! -d ${KERNEL_SRC} ]; then
     exit 1
 fi
 
-echo "I: Copy Kernel config (x86_64_vyos_defconfig) to Kernel Source"
-cp -rv arch/ ${KERNEL_SRC}/
+if $FRESH_BUILD; then
+    echo "I: Copy Kernel config (x86_64_vyos_defconfig) to Kernel Source"
+    cp -rv arch/ ${KERNEL_SRC}/
+fi
 
 cd ${KERNEL_SRC}
 
-echo "I: clean modified files"
-git reset --hard HEAD
+# It will reset update from patch file (perle-vyos/patches/vyos-build/0001_update_packages.patch)
+# Dont do this!!
+# echo "I: clean modified files"
+# git reset --hard HEAD
 
 KERNEL_VERSION=$(make kernelversion)
 KERNEL_SUFFIX=-$(awk -F "= " '/kernel_flavor/ {print $2}' ../../../data/defaults.toml | tr -d \")
 KERNEL_CONFIG=arch/x86/configs/vyos_defconfig
 
-# VyOS requires some small Kernel Patches - apply them here
-# It's easier to habe them here and make use of the upstream
-# repository instead of maintaining a full Kernel Fork.
-# Saving time/resources is essential :-)
-PATCH_DIR=${CWD}/patches/kernel
-for patch in $(ls ${PATCH_DIR})
-do
-    echo "I: Apply Kernel patch: ${PATCH_DIR}/${patch}"
-    patch -p1 < ${PATCH_DIR}/${patch}
-done
+if $FRESH_BUILD; then
+    # VyOS requires some small Kernel Patches - apply them here
+    # It's easier to habe them here and make use of the upstream
+    # repository instead of maintaining a full Kernel Fork.
+    # Saving time/resources is essential :-)
+    PATCH_DIR=${CWD}/patches/kernel
+    for patch in $(ls ${PATCH_DIR})
+    do
+        echo "I: Apply Kernel patch: ${PATCH_DIR}/${patch}"
+        patch -p1 < ${PATCH_DIR}/${patch}
+    done
 
-TRUSTED_KEYS_FILE=trusted_keys.pem
-# start with empty key file
-echo -n "" > $TRUSTED_KEYS_FILE
-CERTS=$(find ../../../data/live-build-config/includes.chroot/var/lib/shim-signed/mok -name "*.pem" -type f)
-if [ ! -z "${CERTS}" ]; then
-  # add known public keys to Kernel certificate chain
-  for file in $CERTS; do
-    cat $file >> $TRUSTED_KEYS_FILE
-  done
+    TRUSTED_KEYS_FILE=trusted_keys.pem
+    # start with empty key file
+    echo -n "" > $TRUSTED_KEYS_FILE
+    CERTS=$(find ../../../data/live-build-config/includes.chroot/var/lib/shim-signed/mok -name "*.pem" -type f)
+    if [ ! -z "${CERTS}" ]; then
+      # add known public keys to Kernel certificate chain
+      for file in $CERTS; do
+       cat $file >> $TRUSTED_KEYS_FILE
+      done
 
-  # Force Kernel module signing and embed public keys
-  echo "CONFIG_MODULE_SIG_FORMAT=y" >> $KERNEL_CONFIG
-  echo "CONFIG_MODULE_SIG=y" >> $KERNEL_CONFIG
-  echo "CONFIG_MODULE_SIG_FORCE=y" >> $KERNEL_CONFIG
-  echo "# CONFIG_MODULE_SIG_ALL is not set" >> $KERNEL_CONFIG
-  echo "CONFIG_MODULE_SIG_SHA512=y" >> $KERNEL_CONFIG
-  echo "CONFIG_MODULE_SIG_HASH=\"sha512\"" >> $KERNEL_CONFIG
-  echo "CONFIG_MODULE_SIG_KEY=\"\"" >> $KERNEL_CONFIG
-  echo "CONFIG_MODULE_SIG_KEY_TYPE_RSA=y" >> $KERNEL_CONFIG
-  echo "CONFIG_SYSTEM_TRUSTED_KEYS=\"$TRUSTED_KEYS_FILE\"" >> $KERNEL_CONFIG
-fi
+      # Force Kernel module signing and embed public keys
+      echo "CONFIG_MODULE_SIG_FORMAT=y" >> $KERNEL_CONFIG
+      echo "CONFIG_MODULE_SIG=y" >> $KERNEL_CONFIG
+      echo "CONFIG_MODULE_SIG_FORCE=y" >> $KERNEL_CONFIG
+      echo "# CONFIG_MODULE_SIG_ALL is not set" >> $KERNEL_CONFIG
+      echo "CONFIG_MODULE_SIG_SHA512=y" >> $KERNEL_CONFIG
+      echo "CONFIG_MODULE_SIG_HASH=\"sha512\"" >> $KERNEL_CONFIG
+      echo "CONFIG_MODULE_SIG_KEY=\"\"" >> $KERNEL_CONFIG
+      echo "CONFIG_MODULE_SIG_KEY_TYPE_RSA=y" >> $KERNEL_CONFIG
+      echo "CONFIG_SYSTEM_TRUSTED_KEYS=\"$TRUSTED_KEYS_FILE\"" >> $KERNEL_CONFIG
+    fi
 
-echo "I: make vyos_defconfig"
-# Select Kernel configuration - currently there is only one
-make vyos_defconfig
+    echo "I: make vyos_defconfig"
+    # Select Kernel configuration - currently there is only one
+    make vyos_defconfig
 
-echo "I: Generate environment file containing Kernel variable"
-cat << EOF >${CWD}/kernel-vars
+    echo "I: Generate environment file containing Kernel variable"
+    cat << EOF >${CWD}/kernel-vars
 #!/bin/sh
 export KERNEL_VERSION=${KERNEL_VERSION}
 export KERNEL_SUFFIX=${KERNEL_SUFFIX}
 export KERNEL_DIR=${CWD}/${KERNEL_SRC}
 EOF
+fi
 
 echo "I: Build Debian Kernel package"
 touch .scmversion
diff --git a/packages/linux-kernel/build-mwifiex.sh b/packages/linux-kernel/build-mwifiex.sh
new file mode 100755
index 00000000..af2aa78b
--- /dev/null
+++ b/packages/linux-kernel/build-mwifiex.sh
@@ -0,0 +1,32 @@
+#!/bin/sh
+CWD=$(pwd)
+PATCH_DIR=$(dirname $(dirname $(dirname ${CWD})))/patches
+IMX_FIRMWARE_REPO="https://github.com/nxp-imx/imx-firmware.git"
+# IMX_FIRMWARE_BRANCH="lf-6.6.3_1.0.0"
+IMX_FIRMWARE_BRANCH=$1
+
+MWIFIEX_SRC=${CWD}/mwifiex
+if [ ! -d ${MWIFIEX_SRC} ]; then
+    echo "MWIFIEX source not found"
+    exit 1
+fi
+
+FIRMWARE_SRC=${MWIFIEX_SRC}/imx-firmware
+if [ ! -d $FIRMWARE_SRC ]; then
+    git clone ${IMX_FIRMWARE_REPO} -b ${IMX_FIRMWARE_BRANCH} ${FIRMWARE_SRC}
+fi
+
+cd ${MWIFIEX_SRC}/mxm_wifiex/wlan_src
+echo "I: Build MWIFIEX driver"
+make -C ${CWD}/linux M=$PWD
+
+echo "Patch DIR: ${PATCH_DIR}"
+mkdir -p ${PATCH_DIR}/fs/lib/modules/nxp
+echo "Copying *.ko files to ${PATCH_DIR}/fs/lib/modules/nxp/"
+cp -rf ${MWIFIEX_SRC}/mxm_wifiex/wlan_src/*.ko ${PATCH_DIR}/fs/lib/modules/nxp/
+
+mkdir -p ${PATCH_DIR}/fs/lib/firmware/nxp
+echo "Copying *.bin file to ${PATCH_DIR}/fs/lib/firmware/nxp/"
+cp -rf ${FIRMWARE_SRC}/nxp/FwImage_9098_PCIE/*.bin ${PATCH_DIR}/fs/lib/firmware/nxp/
+echo "Copying wifi_mod_para.conf file to ${PATCH_DIR}/fs/lib/firmware/nxp/"
+cp -rf ${FIRMWARE_SRC}/nxp/wifi_mod_para.conf ${PATCH_DIR}/fs/lib/firmware/nxp/
diff --git a/packages/linux-kernel/perle-Jenkinsfile b/packages/linux-kernel/perle-Jenkinsfile
new file mode 100755
index 00000000..e90de7e1
--- /dev/null
+++ b/packages/linux-kernel/perle-Jenkinsfile
@@ -0,0 +1,85 @@
+// Copyright (C) 2020-2024 VyOS maintainers and contributors
+//
+// This program is free software; you can redistribute it and/or modify
+// in order to easy exprort images built to "external" world
+// it under the terms of the GNU General Public License version 2 or later as
+// published by the Free Software Foundation.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+@NonCPS
+
+// Using a version specifier library, use 'current' branch. The underscore (_)
+// is not a typo! You need this underscore if the line immediately after the
+// @Library annotation is not an import statement!
+@Library('vyos-build@current')_
+
+def pkgList = [
+    // The Linux Kernel
+    ['name': 'kernel',
+     'buildCmd': './perle-kernel-prepare.sh; ./build-kernel.sh'],
+
+    // Firmware
+    ['name': 'linux-firmware',
+     'scmCommit': '20240610',
+     'scmUrl': 'https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git',
+     'buildCmd': 'cd ..; ./build-linux-firmware.sh'],
+
+    // Accel-PPP
+    ['name': 'accel-ppp',
+     'scmCommit': '1.13.0',
+     'scmUrl': 'https://github.com/accel-ppp/accel-ppp.git',
+     'buildCmd': 'cd ..; pwd; ls -al; ./build-accel-ppp.sh'],
+
+    // Intel QAT
+    ['name': 'qat',
+     'buildCmd': './build-intel-qat.sh'],
+
+    // Intel IXGBE
+    ['name': 'ixgbe',
+     'buildCmd': './build-intel-ixgbe.sh'],
+
+    // Intel IXGBEVF
+    ['name': 'ixgbevf',
+     'buildCmd': './build-intel-ixgbevf.sh'],
+
+    // Mellanox OFED
+    ['name': 'ofed',
+     'buildCmd': './build-mellanox-ofed.sh'],
+
+    // Jool
+    ['name': 'jool',
+     'buildCmd': './build-jool.py'],
+
+    // OpenVPN DCO
+    ['name': 'ovpn-dco',
+     'scmCommit': 'v0.2.20231117',
+     'scmUrl': 'https://github.com/OpenVPN/ovpn-dco',
+     'buildCmd': 'cd ..; ./build-openvpn-dco.sh'],
+
+    // RTSP netfilter helper
+    ['name': 'nat-rtsp',
+     'scmCommit': '475af0a',
+     'scmUrl': 'https://github.com/maru-sama/rtsp-linux.git',
+     'buildCmd': 'cd ..; ./build-nat-rtsp.sh'],
+
+    // NXP 88Q9098/88W9098
+    ['name': 'mwifiex',
+     'scmCommit': 'lf-6.6.3_1.0.0',
+     'scmUrl': 'https://github.com/nxp-imx/mwifiex.git',
+     'buildCmd': 'cd ..; ./build-mwifiex.sh lf-6.6.3_1.0.0'],
+
+         // Debian
+    ['name': 'debian-repos',
+    'scmCommit': '09.02.00.009-update',
+    'scmUrl': 'https://github.com/TexasInstruments/debian-repos.git',
+    'buildCmd': './run.sh ti-linux-firmware; cp -rf build/bookworm/ti-linux-firmware/*64*.deb ..'],
+]
+
+// Start package build using library function from https://github.com/vyos/vyos-build
+buildPackage('Kernel', pkgList, null, true, "**/packages/linux-kernel/**")
diff --git a/packages/linux-kernel/perle-kernel-prepare.sh b/packages/linux-kernel/perle-kernel-prepare.sh
new file mode 100755
index 00000000..dee749e3
--- /dev/null
+++ b/packages/linux-kernel/perle-kernel-prepare.sh
@@ -0,0 +1,15 @@
+#!/bin/bash
+
+# read the required Kernel version
+KERNEL_VER=$(cat ../../data/defaults.toml | tomlq -r .kernel_version)
+gpg2 --locate-keys torvalds@kernel.org gregkh@kernel.org
+curl -OL https://www.kernel.org/pub/linux/kernel/v6.x/linux-${KERNEL_VER}.tar.xz
+curl -OL https://www.kernel.org/pub/linux/kernel/v6.x/linux-${KERNEL_VER}.tar.sign
+xz -cd linux-${KERNEL_VER}.tar.xz | gpg2 --verify linux-${KERNEL_VER}.tar.sign -
+if [ $? -ne 0 ]; then
+    exit 1
+fi
+
+# Unpack Kernel source
+tar xf linux-${KERNEL_VER}.tar.xz
+ln -s linux-${KERNEL_VER} linux
diff --git a/packages/pmacct/Jenkinsfile b/packages/pmacct/Jenkinsfile
index 19af2c9b..2a63c5f0 100644
--- a/packages/pmacct/Jenkinsfile
+++ b/packages/pmacct/Jenkinsfile
@@ -23,10 +23,10 @@
 def package_name = 'pmacct'
 // "sudo apt-get remove git -y" is necessary for solving this issue https://vyos.dev/T5663
 def pkgList = [
-    ['name': "${package_name}",
+    ['name': 'pmacct',
      'scmCommit': 'debian/1.7.7-1',
      'scmUrl': 'https://salsa.debian.org/debian/pmacct.git',
-     'buildCmd': 'sudo mk-build-deps --install --tool "apt-get --yes --no-install-recommends"; sudo apt-get remove git -y; ../build.py'],
+     'buildCmd': 'sudo mk-build-deps --install --tool "apt-get --yes --no-install-recommends"; sudo apt-get remove git -y; ../build.py; sudo apt install -y git'],
 ]
 
 // Start package build using library function from https://github.com/vyos/vyos-build
diff --git a/packages/podman/Jenkinsfile b/packages/podman/Jenkinsfile
index cc787565..0b231139 100644
--- a/packages/podman/Jenkinsfile
+++ b/packages/podman/Jenkinsfile
@@ -22,7 +22,7 @@
 
 def pkgList = [
     ['name': 'podman',
-     'scmCommit': 'v4.9.5',
+     'scmCommit': 'v5.2.2',
      'scmUrl': 'https://github.com/containers/podman',
      'buildCmd': 'cd ..; ./build.sh'],
 ]
diff --git a/packages/telegraf/build.sh b/packages/telegraf/build.sh
index 2ba511d0..1ccfea6f 100755
--- a/packages/telegraf/build.sh
+++ b/packages/telegraf/build.sh
@@ -25,3 +25,5 @@ export PATH=/opt/go/bin:$PATH
 # Generate default telegraf config
 go run ./cmd/telegraf config > etc/telegraf.conf
 LDFLAGS=-w make "${BUILD_ARCH}.deb"
+
+cp ${CWD}/${SRC}/build/dist/*.deb ${CWD}
diff --git a/packages/vyos/.gitignore b/packages/vyos/.gitignore
new file mode 100644
index 00000000..d67691f9
--- /dev/null
+++ b/packages/vyos/.gitignore
@@ -0,0 +1,5 @@
+vyos-1x*
+vyos-user-utils*
+vyos-xe-guest-utilities*
+libvyosconfig*
+vyatta-bash*
\ No newline at end of file
diff --git a/packages/vyos/Jenkinsfile b/packages/vyos/Jenkinsfile
new file mode 100644
index 00000000..d7522894
--- /dev/null
+++ b/packages/vyos/Jenkinsfile
@@ -0,0 +1,51 @@
+// Copyright (C) 2024 VyOS maintainers and contributors
+//
+// This program is free software; you can redistribute it and/or modify
+// in order to easy exprort images built to "external" world
+// it under the terms of the GNU General Public License version 2 or later as
+// published by the Free Software Foundation.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+@NonCPS
+
+// Using a version specifier library, use 'current' branch. The underscore (_)
+// is not a typo! You need this underscore if the line immediately after the
+// @Library annotation is not an import statement!
+@Library('vyos-build@current')_
+
+def pkgList = [
+    ['name': 'vyos-1x',
+     'scmCommit': 'current',
+     'scmUrl': 'https://github.com/vyos/vyos-1x',
+     'buildCmd': 'dpkg-buildpackage -uc -us -tc -b'],
+
+    ['name': 'vyos-user-utils',
+     'scmCommit': 'current',
+     'scmUrl': 'https://github.com/vyos/vyos-user-utils.git',
+     'buildCmd': 'dpkg-buildpackage -uc -us -tc -b'],
+
+    ['name': 'vyos-xe-guest-utilities',
+     'scmCommit': 'current',
+     'scmUrl': 'https://github.com/vyos/vyos-xe-guest-utilities.git',
+     'buildCmd': 'dpkg-buildpackage -b -us -uc -tc'],
+
+    ['name': 'libvyosconfig',
+     'scmCommit': 'current',
+     'scmUrl': 'https://github.com/vyos/libvyosconfig.git',
+     'buildCmd': 'eval $(opam env --root=/opt/opam --set-root) && dpkg-buildpackage -b -us -uc -tc'],
+
+    ['name': 'vyatta-bash',
+     'scmCommit': 'current',
+     'scmUrl': 'https://github.com/vyos/vyatta-bash.git',
+     'buildCmd': 'dpkg-buildpackage -b -us -uc -tc'],
+]
+
+// Start package build using library function from https://github.com/vyos/vyos-build
+buildPackage('vyos', pkgList, null, false, "**/packages/vyos/**")
diff --git a/packages/waagent/.gitignore b/packages/waagent/.gitignore
new file mode 100644
index 00000000..762c9db5
--- /dev/null
+++ b/packages/waagent/.gitignore
@@ -0,0 +1 @@
+waagent/
diff --git a/packages/waagent/Jenkinsfile b/packages/waagent/Jenkinsfile
index 79415d71..90567b1b 100644
--- a/packages/waagent/Jenkinsfile
+++ b/packages/waagent/Jenkinsfile
@@ -22,7 +22,7 @@
 
 def package_name = 'waagent'
 def pkgList = [
-    ['name': "${package_name}",
+    ['name': 'waagent',
      'scmCommit': 'debian/2.9.1.1-2',
      'scmUrl': 'https://salsa.debian.org/cloud-team/waagent.git',
      'buildCmd': 'sudo mk-build-deps --install --tool "apt-get --yes --no-install-recommends"; sudo apt-get install --yes --no-install-recommends dpkg-source-gitarchive; ../build.py'],
diff --git a/packages/wide-dhcpv6/.gitignore b/packages/wide-dhcpv6/.gitignore
index 5fd2ad64..4eb22ba4 100644
--- a/packages/wide-dhcpv6/.gitignore
+++ b/packages/wide-dhcpv6/.gitignore
@@ -1 +1 @@
-wide-dhcpv6/
+wide-dhcpv6*
diff --git a/scripts/image-build/build-vyos-image b/scripts/image-build/build-vyos-image
index c1711a5c..3fe41038 100755
--- a/scripts/image-build/build-vyos-image
+++ b/scripts/image-build/build-vyos-image
@@ -379,6 +379,7 @@ if __name__ == "__main__":
     if build_config["reuse_iso"]:
         iso_file = build_config["reuse_iso"]
         manifest["artifacts"] = [iso_file]
+        print(f"I: reuse iso file : {iso_file}")
     else:
         ## Create the version file
 
diff --git a/scripts/image-build/defaults.py b/scripts/image-build/defaults.py
index a0c5c8bf..e1af6fe4 100644
--- a/scripts/image-build/defaults.py
+++ b/scripts/image-build/defaults.py
@@ -38,6 +38,7 @@ HARDCODED_BUILD = {
     'custom_apt_key': [],
     'custom_package': [],
     'reuse_iso': None,
+#    'reuse_iso': 'live-image-arm64.hybrid.iso',
     'disk_size': 10,
     'build_by': get_default_build_by(),
     'build_comment': '',
